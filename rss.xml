<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Coding Comrade]]></title><description><![CDATA[Living the Full-Stack Life]]></description><link>https://CodingComrade.com</link><generator>GatsbyJS</generator><lastBuildDate>Fri, 03 Oct 2025 21:14:02 GMT</lastBuildDate><item><title><![CDATA[Efficient way to select the first row from each group in PostgreSQL]]></title><description><![CDATA[Recently, I encountered a situation where I had to optimize an SQL query due to PostgreSQL’s excessive CPU utilization. The query itself…]]></description><link>https://CodingComrade.com/efficient-way-to-select-the-first-row-from-each-group-in-postgresql/</link><guid isPermaLink="false">https://CodingComrade.com/efficient-way-to-select-the-first-row-from-each-group-in-postgresql/</guid><pubDate>Wed, 29 Nov 2023 03:12:51 GMT</pubDate><content:encoded>&lt;p&gt;Recently, I encountered a situation where I had to optimize an SQL query due to PostgreSQL’s excessive CPU utilization. The query itself seemed straightforward, but it was consistently taking more than 30 seconds to complete. Considering it was a frequently used query, it was causing frequent CPU spikes, impacting the performance of other queries.&lt;/p&gt;
&lt;p&gt;Here’s the original sample query:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt;
            tbl1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            tbl2&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt;
            tbl1
            &lt;span class=&quot;token keyword&quot;&gt;JOIN&lt;/span&gt; tbl2 &lt;span class=&quot;token keyword&quot;&gt;ON&lt;/span&gt; tbl1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; tbl2&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id
        &lt;span class=&quot;token keyword&quot;&gt;WHERE&lt;/span&gt;
            tbl1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;other_id &lt;span class=&quot;token operator&quot;&gt;IN&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt;
                    &lt;span class=&quot;token function&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;tbl1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;other_id&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt;
                    tbl1
                    &lt;span class=&quot;token keyword&quot;&gt;JOIN&lt;/span&gt; tbl2 &lt;span class=&quot;token keyword&quot;&gt;ON&lt;/span&gt; tbl1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; tbl2&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id
                &lt;span class=&quot;token keyword&quot;&gt;WHERE&lt;/span&gt;
                    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;some&lt;/span&gt; conditions&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;BY&lt;/span&gt;
                    tbl1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;other_id
            &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;BY&lt;/span&gt;
            tbl1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;other_id
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;AS&lt;/span&gt; innerQuery
&lt;span class=&quot;token keyword&quot;&gt;LIMIT&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Accompanied by its execution plan:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt; Limit  (cost=11686.42..12241.94 rows=300 width=371) (actual time=31094.513..31094.518 rows=1 loops=1)
   -&amp;gt;  Nested Loop  (cost=11686.42..7597359.01 rows=4118716 width=371) (actual time=31094.512..31094.517 rows=1 loops=1)
         -&amp;gt;  Merge Join  (cost=11686.13..6340599.52 rows=4118716 width=243) (actual time=31094.478..31094.483 rows=1 loops=1)
               Merge Cond: (tbl1.other_id = &amp;quot;ANY_subquery&amp;quot;.min)
               -&amp;gt;  Index Scan using &amp;lt;some idx&amp;gt; on tbl1  (cost=0.56..6308317.36 rows=8237433 width=243) (actual time=0.016..30363.563 rows=7959843 loops=1)
               -&amp;gt;  Sort  (cost=11685.57..11686.07 rows=200 width=8) (actual time=0.628..0.629 rows=1 loops=1)
                     Sort Key: &amp;quot;ANY_subquery&amp;quot;.min
                     Sort Method: quicksort  Memory: 25kB
                     -&amp;gt;  HashAggregate  (cost=11675.93..11677.93 rows=200 width=8) (actual time=0.616..0.619 rows=1 loops=1)
                           Group Key: &amp;quot;ANY_subquery&amp;quot;.min
                           -&amp;gt;  Subquery Scan on &amp;quot;ANY_subquery&amp;quot;  (cost=11613.16..11674.72 rows=482 width=8) (actual time=0.613..0.613 rows=1 loops=1)
                                 -&amp;gt;  Finalize GroupAggregate  (cost=11613.16..11669.90 rows=482 width=16) (actual time=0.612..0.612 rows=1 loops=1)
                                       Group Key: tbl1.other_id
                                       -&amp;gt;  Gather Merge  (cost=11613.16..11663.07 rows=402 width=16) (actual time=0.610..0.730 rows=1 loops=1)
                                             Workers Planned: 2
                                             Workers Launched: 0
                                             -&amp;gt;  Partial GroupAggregate  (cost=10613.13..10616.65 rows=201 width=16) (actual time=0.104..0.104 rows=1 loops=1)
                                                   Group Key: tbl1.other_id
                                                   -&amp;gt;  Sort  (cost=10613.13..10613.63 rows=201 width=16) (actual time=0.102..0.102 rows=1 loops=1)
                                                         Sort Key: tbl1.other_id
                                                         Sort Method: quicksort  Memory: 25kB
                                                         -&amp;gt;  Nested Loop Left Join  (cost=1.53..10605.44 rows=201 width=16) (actual time=0.066..0.093 rows=1 loops=1)
                                                               Filter: ((&amp;lt;condition1&amp;gt;) OR (&amp;lt;condition2&amp;gt;))
                                                               -&amp;gt;  Nested Loop  (cost=0.97..9964.02 rows=248 width=24) (actual time=0.054..0.081 rows=1 loops=1)
                                                                     -&amp;gt;  Parallel Index Scan using &amp;lt;some idx&amp;gt; on tbl1  (cost=0.68..9158.50 rows=1125 width=32) (actual time=0.040..0.067 rows=1 loops=1)
                                                                           Index Cond: (&amp;lt;condition&amp;gt;)
                                                                           Filter: (&amp;lt;condition&amp;gt;)
                                                                           Rows Removed by Filter: 2
                                                                     -&amp;gt;  Index Scan using &amp;lt;some idx&amp;gt; on tbl2  (cost=0.29..0.72 rows=1 width=8) (actual time=0.012..0.012 rows=1 loops=1)
                                                                           Index Cond: (&amp;lt;condition&amp;gt;)
                                                                           Filter: (&amp;lt;condition&amp;gt;)
         -&amp;gt;  Index Scan using &amp;lt;some idx&amp;gt; on tbl2  (cost=0.29..0.31 rows=1 width=136) (actual time=0.025..0.025 rows=1 loops=1)
               Index Cond: (&amp;lt;condition&amp;gt;)
 Planning time: 1.531 ms
 Execution time: 31094.852 ms&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As can be seen, the query essentially retrieves the first row from a group of rows, yet it takes a staggering 31 seconds!&lt;/p&gt;
&lt;p&gt;PostgreSQL offers a unique statement called &lt;code class=&quot;language-text&quot;&gt;SELECT DISTINCT ON&lt;/code&gt; specifically designed to achieve this goal in a much more efficient manner. It eliminates rows that match on all the specified expressions, ensuring that only the first distinct row for each group is returned.&lt;/p&gt;
&lt;p&gt;Here’s the optimized query using &lt;code class=&quot;language-text&quot;&gt;SELECT DISTINCT ON&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;select&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;select&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;distinct&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;tbl1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;other_id&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; tbl1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; tbl2&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt;
            tbl1
            &lt;span class=&quot;token keyword&quot;&gt;join&lt;/span&gt; tbl2 &lt;span class=&quot;token keyword&quot;&gt;on&lt;/span&gt; tbl1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; tbl2&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id
        &lt;span class=&quot;token keyword&quot;&gt;where&lt;/span&gt;
            &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;some&lt;/span&gt; conditions&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;by&lt;/span&gt;
            tbl1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;other_id&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            tbl1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; q
&lt;span class=&quot;token keyword&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;by&lt;/span&gt;
    id
&lt;span class=&quot;token keyword&quot;&gt;limit&lt;/span&gt;
    &lt;span class=&quot;token number&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This query’s execution plan is as follows:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt; Limit  (cost=11082.00..11082.75 rows=300 width=371) (actual time=2.102..2.104 rows=8 loops=1)
   -&amp;gt;  Sort  (cost=11082.00..11083.13 rows=454 width=371) (actual time=2.101..2.102 rows=8 loops=1)
         Sort Key: q.id
         Sort Method: quicksort  Memory: 29kB
         -&amp;gt;  Subquery Scan on q  (cost=11055.15..11061.96 rows=454 width=371) (actual time=2.044..2.063 rows=8 loops=1)
               -&amp;gt;  Unique  (cost=11055.15..11057.42 rows=454 width=379) (actual time=2.042..2.053 rows=8 loops=1)
                     -&amp;gt;  Sort  (cost=11055.15..11056.28 rows=454 width=379) (actual time=2.041..2.042 rows=8 loops=1)
                           Sort Key: tbl1.other_id, tbl1.id
                           Sort Method: quicksort  Memory: 29kB
                           -&amp;gt;  Gather  (cost=1001.53..11035.11 rows=454 width=379) (actual time=1.505..2.116 rows=8 loops=1)
                                 Workers Planned: 2
                                 Workers Launched: 0
                                 -&amp;gt;  Nested Loop Left Join  (cost=1.53..9989.71 rows=189 width=379) (actual time=0.235..0.747 rows=8 loops=1)
                                       Filter: (&amp;lt;some conditions&amp;gt;)
                                       Rows Removed by Filter: 3
                                       -&amp;gt;  Nested Loop  (cost=0.97..9387.10 rows=233 width=379) (actual time=0.090..0.514 rows=11 loops=1)
                                             -&amp;gt;  Parallel Index Scan using &amp;lt;idx&amp;gt; on tbl1  (cost=0.68..8600.52 rows=1059 width=251) (actual time=0.057..0.351 rows=19 loops=1)
                                                   Index Cond: (&amp;lt;condition&amp;gt;)
                                                   Filter: (&amp;lt;condition&amp;gt;)
                                                   Rows Removed by Filter: 14
                                             -&amp;gt;  Index Scan using &amp;lt;idx&amp;gt; on tbl2  (cost=0.29..0.74 rows=1 width=136) (actual time=0.008..0.008 rows=1 loops=19)
                                                   Index Cond: (&amp;lt;condition&amp;gt;)
                                                   Filter: (&amp;lt;condition&amp;gt;)
                                                   Rows Removed by Filter: 0
 Planning time: 4.296 ms
 Execution time: 2.547 ms&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Remarkably, the execution time drops to just 2 milliseconds, representing a staggering 99.9999% improvement!&lt;/p&gt;
&lt;p&gt;Key Takeaways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;SELECT DISTINCT ON&lt;/code&gt; is a PostgreSQL-specific statement for efficiently selecting the first row from each group.&lt;/li&gt;
&lt;li&gt;Ordering rows is crucial when using &lt;code class=&quot;language-text&quot;&gt;SELECT DISTINCT ON&lt;/code&gt;; otherwise, the order becomes unpredictable.&lt;/li&gt;
&lt;li&gt;Replacing the original query with the optimized &lt;code class=&quot;language-text&quot;&gt;SELECT DISTINCT ON&lt;/code&gt; approach significantly reduces execution time and improves overall query performance.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I hope this blog post has shed light on the efficient way to select the first row from each group in PostgreSQL using &lt;code class=&quot;language-text&quot;&gt;SELECT DISTINCT ON&lt;/code&gt;. Remember to always optimize queries to ensure optimal database performance.&lt;/p&gt;
&lt;p&gt;Happy coding!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Using ResourceAccount context key to scope down IAM role permissions]]></title><description><![CDATA[AWS Identity and Access Management (IAM) is a service that allows to control access to AWS resources. IAM supports various identities…]]></description><link>https://CodingComrade.com/using-resource-account-context-key-to-scope-down-iam-role-permissions/</link><guid isPermaLink="false">https://CodingComrade.com/using-resource-account-context-key-to-scope-down-iam-role-permissions/</guid><pubDate>Mon, 27 Nov 2023 23:38:06 GMT</pubDate><content:encoded>&lt;p&gt;AWS Identity and Access Management (IAM) is a service that allows to control access to AWS resources. IAM supports various identities, including IAM roles. An IAM role contains permission policies that describe what the identity can and cannot do in AWS.&lt;/p&gt;
&lt;p&gt;Often, permissions need to be scoped down based on a context. For example, one may want to grant an IAM role permission to assume an IAM role, but only if the role belongs to a specific account.&lt;/p&gt;
&lt;p&gt;There are two traditional approaches to scoping down IAM role permissions in this case:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Creating unique IAM roles for each required account: This approach is not scalable, as IAM has a default quota of 1000 roles per account.&lt;/li&gt;
&lt;li&gt;Passing an inline policy to STS in the &lt;code class=&quot;language-text&quot;&gt;AssumeRole&lt;/code&gt; call: This approach can exceed the maximum size for session tokens, which can result in the &lt;code class=&quot;language-text&quot;&gt;PackedPolicyTooLarge&lt;/code&gt; error.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Fortunately, there is now a workaround for this. IAM supports a large number of &lt;a href=&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_condition-keys.html&quot;&gt;different context keys&lt;/a&gt;, and one of them is the &lt;a href=&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_condition-keys.html#condition-keys-resourceaccount&quot;&gt;ResourceAccount&lt;/a&gt; context key. This context key can be used to check whether the resource account is equal to something, where “something” can be a session tag included in the session.&lt;/p&gt;
&lt;p&gt;Using the &lt;code class=&quot;language-text&quot;&gt;ResourceAccount&lt;/code&gt; context key has several benefits:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It allows to scope down IAM role permissions without a need to create many IAM roles.&lt;/li&gt;
&lt;li&gt;It saves precious space in session tokens, which can help to avoid the &lt;code class=&quot;language-text&quot;&gt;PackedPolicyTooLarge&lt;/code&gt; error.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The following example shows how to use the &lt;code class=&quot;language-text&quot;&gt;ResourceAccount&lt;/code&gt; context key to scope down IAM role permissions:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;Version&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;2012-10-17&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;Statement&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;Effect&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Allow&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;Action&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;sts:AssumeRole&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;Resource&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;arn:aws:iam::*:role/sample-role-to-assume&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;Condition&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token property&quot;&gt;&quot;StringEquals&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;aws:ResourceAccount&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;${aws:PrincipalTag/SessionAccountID}&quot;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this example, the IAM role will only be able to assume the &lt;code class=&quot;language-text&quot;&gt;sample-role-to-assume&lt;/code&gt; role if the AWS account ID of the resource matches the &lt;code class=&quot;language-text&quot;&gt;SessionAccountID&lt;/code&gt; session tag.&lt;/p&gt;
&lt;p&gt;The &lt;code class=&quot;language-text&quot;&gt;ResourceAccount&lt;/code&gt; context key is a powerful tool that can be used to scope down IAM role permissions. It is a more scalable and efficient approach than the traditional methods, and it can help to avoid the &lt;code class=&quot;language-text&quot;&gt;PackedPolicyTooLarge&lt;/code&gt; error.&lt;/p&gt;
&lt;p&gt;Happy coding!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Running Microsoft Orleans in AWS ECS]]></title><description><![CDATA[Microsoft Orleans is a great framework for building distributed systems. It runs many little silos that do their bit of work. In order to…]]></description><link>https://CodingComrade.com/running-microsoft-orleans-in-aws-ecs/</link><guid isPermaLink="false">https://CodingComrade.com/running-microsoft-orleans-in-aws-ecs/</guid><pubDate>Mon, 05 Oct 2020 03:56:06 GMT</pubDate><content:encoded>&lt;p&gt;&lt;a href=&quot;https://dotnet.github.io/orleans/&quot;&gt;Microsoft Orleans&lt;/a&gt; is a great framework for building distributed systems. It runs many little silos that do their bit of work. In order to work as a one system, they need to talk to each other. Unfortunately, there is no documentation on how to deploy it into &lt;a href=&quot;https://aws.amazon.com/ecs/&quot;&gt;AWS ECS&lt;/a&gt; and one will most likely face some networking issues.&lt;/p&gt;
&lt;p&gt;In a dynamic environment, like &lt;a href=&quot;https://aws.amazon.com/ecs/&quot;&gt;AWS ECS&lt;/a&gt;, containers scale up and down all the time to achieve optimal resource utilisation or to respond to the load, e.g. number of messages in the processing queue. Each &lt;a href=&quot;https://dotnet.github.io/orleans/&quot;&gt;Microsoft Orleans&lt;/a&gt; silo registers itself in a directory during the startup stage, normally it’s a database. This is how they know how to discover each other. But how is it possible to find out the host’s IP address and port, when we don’t even know the container instance which will host the task?&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://aws.amazon.com/&quot;&gt;AWS&lt;/a&gt; provides multiple HTTP endpoints that allow us to get useful information at runtime. The port information can be read from the &lt;a href=&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-metadata-endpoint-v4.html&quot;&gt;Amazon ECS Task metadata endpoint version 4&lt;/a&gt;. It returns JSON data, including the port mappings we are after. The container instance IP address can be obtained by calling the following &lt;a href=&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instancedata-data-retrieval.html&quot;&gt;instance metadata&lt;/a&gt; endpoint: &lt;code class=&quot;language-text&quot;&gt;http://169.254.169.254/latest/meta-data/local-ipv4&lt;/code&gt;. Now, there are no &lt;a href=&quot;https://aws.amazon.com/sdk-for-net/&quot;&gt;AWS SDK&lt;/a&gt; classes, which provide this functionality out of the box. I’ve created a handy &lt;a href=&quot;https://www.nuget.org/packages/AWSECS.ContainerMetadata/&quot;&gt;NuGet package&lt;/a&gt; that does what we need.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Add the &lt;a href=&quot;https://www.nuget.org/packages/AWSECS.ContainerMetadata/&quot;&gt;AWSECS.ContainerMetadata NuGet package&lt;/a&gt; to the project:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;dotnet &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt; package AWSECS.ContainerMetadata&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Add the AWS Container Metadata Service to the DI container:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;csharp&quot;&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;services&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;AddAWSContainerMetadataService&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;Finally, get the information we are looking for and configure the &lt;a href=&quot;https://dotnet.github.io/orleans/&quot;&gt;Microsoft Orleans’&lt;/a&gt; endpoint options (assuming we exposed the default ports from within the container):&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;csharp&quot;&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;Configure&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;EndpointOptions&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;options &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; awsContainerMetadata &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; _awsContainerMetadata&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;GetContainerMetadata&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; siloPort &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; awsContainerMetadata&lt;span class=&quot;token punctuation&quot;&gt;?.&lt;/span&gt;Ports&lt;span class=&quot;token punctuation&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;FirstOrDefault&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;p &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ContainerPort &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; EndpointOptions&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;DEFAULT_SILO_PORT&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;?.&lt;/span&gt;HostPort &lt;span class=&quot;token operator&quot;&gt;??&lt;/span&gt; EndpointOptions&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;DEFAULT_SILO_PORT&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; gatewayPort &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; awsContainerMetadata&lt;span class=&quot;token punctuation&quot;&gt;?.&lt;/span&gt;Ports&lt;span class=&quot;token punctuation&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;FirstOrDefault&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;p &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ContainerPort &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; EndpointOptions&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;DEFAULT_GATEWAY_PORT&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;?.&lt;/span&gt;HostPort &lt;span class=&quot;token operator&quot;&gt;??&lt;/span&gt; EndpointOptions&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;DEFAULT_GATEWAY_PORT&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; advertisedIPAddress &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; _awsContainerMetadata&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;GetHostPrivateIPv4Address&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;??&lt;/span&gt; Dns&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;GetHostAddresses&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Dns&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;GetHostName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;First&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    options&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;AdvertisedIPAddress &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; advertisedIPAddress&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    options&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;SiloPort &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; siloPort&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    options&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;GatewayPort &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; gatewayPort&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    options&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;GatewayListeningEndpoint &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IPEndPoint&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;IPAddress&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Any&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; EndpointOptions&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;DEFAULT_GATEWAY_PORT&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    options&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;SiloListeningEndpoint &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IPEndPoint&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;IPAddress&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Any&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; EndpointOptions&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;DEFAULT_SILO_PORT&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br&gt;
It’s as simple as that. If you want to take a look at the source code, it’s hosted &lt;a href=&quot;https://github.com/eyamenko/AWSECS.ContainerMetadata&quot;&gt;here&lt;/a&gt;. If you find an issue or just want to make it better, please don’t hesitate to create a pull request.&lt;/p&gt;
&lt;p&gt;Happy coding!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Robust caching with Redis]]></title><description><![CDATA[Sometimes querying the database can be slow. Especially, if the tables are large and it’s not possible to take advantage of existing indices…]]></description><link>https://CodingComrade.com/robust-caching-with-redis/</link><guid isPermaLink="false">https://CodingComrade.com/robust-caching-with-redis/</guid><pubDate>Wed, 25 Dec 2019 02:55:56 GMT</pubDate><content:encoded>&lt;p&gt;Sometimes querying the database can be slow. Especially, if the tables are large and it’s not possible to take advantage of existing indices. That’s where caching shines. It’s a lot faster to get a value from cache instead of getting it from the database. Particularly, if it’s a frequently returned data and it doesn’t change often.&lt;/p&gt;
&lt;p&gt;One of the great solutions for caching is &lt;a href=&quot;https://redis.io/&quot;&gt;Redis&lt;/a&gt;. Redis is an in-memory data store. There are client libraries for all main platforms. Redis is widely used and it’s supported by all major cloud providers (AWS, Azure, etc.).&lt;/p&gt;
&lt;p&gt;Unfortunately, incorrectly used or incorrectly configured client can bring the entire service down. Let’s take a look at some good practices, which can help to speed up our services and don’t kill them under the load.&lt;/p&gt;
&lt;p&gt;As an example, I will use an excellent client library for .NET, called &lt;a href=&quot;https://stackexchange.github.io/StackExchange.Redis/&quot;&gt;StackExchange.Redis&lt;/a&gt;. At the time of writing, it’s the most popular one and it’s battle tested by some large websites, e.g. &lt;a href=&quot;https://stackoverflow.com/&quot;&gt;StackOverflow&lt;/a&gt;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;First things first, make sure to use the latest version of the library. Authors promptly fix issues and often release new versions.&lt;/li&gt;
&lt;li&gt;Have a single connection per application and initialize it in a thread-safe way. Make the cache client a singleton.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;csharp&quot;&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// In the constructor&lt;/span&gt;
_connection &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;Lazy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ConnectionMultiplexer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; ConnectionMultiplexer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Connect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;redisOptions&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Value&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Configuration&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;csharp&quot;&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Startup.cs&lt;/span&gt;
services&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;AddSingleton&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ICacheClient&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;RedisCacheClient&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;Use circuit breakers. Wrap get and set commands into a separate circuit breakers. Sometimes new items cannot be inserted, because the server, for instance, ran out of memory, but it shouldn’t affect the ability to get cached items.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;csharp&quot;&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// In the constructor&lt;/span&gt;
_readCircuitBreaker &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Policy&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;Handle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;CircuitBreakerAsync&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;exceptionsAllowedBeforeBreaking&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; durationOfBreak&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
_writeCircuitBreaker &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Policy&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;Handle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;CircuitBreakerAsync&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;exceptionsAllowedBeforeBreaking&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; durationOfBreak&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;If there is no need, don’t wait for a response when setting values. Just fire and forget set commands.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;csharp&quot;&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;keyValuePairs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Select&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;kvp &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; db&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;StringSetAsync&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;kvp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Key&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; kvp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Value&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; expiry&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; _cacheExpiry&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; flags&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; CommandFlags&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;FireAndForget&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;Set the minimum number of worker threads used by the application. More can be read about it &lt;a href=&quot;https://github.com/StackExchange/StackExchange.Redis/blob/master/docs/Timeouts.md&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;csharp&quot;&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Program.cs&lt;/span&gt;
ThreadPool&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;SetMinThreads&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;MinThreads&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; MinThreads&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;6&quot;&gt;
&lt;li&gt;Configure the client to not abort if connection fails. Also, configure sync and connection timeouts.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token property&quot;&gt;&quot;Configuration&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;localhost:6379,abortConnect=false,syncTimeout=3000,connectTimeout=3000&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br&gt;
Happy coding!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Automatic code formatting for .NET projects]]></title><description><![CDATA[Every programmer has its own coding style preferences, but software development teams should have a well defined standards. It makes it…]]></description><link>https://CodingComrade.com/automatic-code-formatting-for-dotnet-projects/</link><guid isPermaLink="false">https://CodingComrade.com/automatic-code-formatting-for-dotnet-projects/</guid><pubDate>Sun, 29 Sep 2019 07:34:53 GMT</pubDate><content:encoded>&lt;p&gt;Every programmer has its own coding style preferences, but software development teams should have a well defined standards. It makes it easier to maintain the project, read the code, review pull requests, etc. Team mates join and leave. If there is no common ground, projects start looking like a collection of unrelated things.&lt;/p&gt;
&lt;p&gt;To solve this issue, community created a wide variety of tools. For instance, there is an awesome project called &lt;a href=&quot;https://prettier.io/&quot;&gt;Prettier&lt;/a&gt;. It formats, or how they call it — &lt;em&gt;prettifies&lt;/em&gt;, certain files. Unfortunately, it doesn’t support .NET languages, but don’t get upset. There is something out there that can help us keep our .NET codebases consistent.&lt;/p&gt;
&lt;p&gt;Kind people from Microsoft created a handy dotnet tool - &lt;a href=&quot;https://github.com/dotnet/format&quot;&gt;dotnet-format&lt;/a&gt;. It reads style preferences from an &lt;a href=&quot;https://editorconfig.org/&quot;&gt;.editorconfig&lt;/a&gt; file and formats files accordingly. As a bonus, Visual Studio supports &lt;em&gt;.editorconfig&lt;/em&gt; rules as well and can apply them when the code is formatted manually. Looks like we’ve got everything in place now, we can relax and stop worrying about style preferences and formatting. The solution/project can be initially formatted by the &lt;em&gt;dotnet-format&lt;/em&gt; and then, before committing a change, each developer will have to make sure they format their change in Visual Studio manually. There is one little problem here though, people tend to forget things. We can do better. We can automate it.&lt;/p&gt;
&lt;p&gt;.NET Core 3.0 introduced a concept of &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/core/whats-new/dotnet-core-3-0#local-tools&quot;&gt;local dotnet tools&lt;/a&gt;. It’s similar to local executable &lt;em&gt;npm&lt;/em&gt; scripts. We can install the &lt;em&gt;dotnet-format&lt;/em&gt; as a local tool and then make it format staged files when someone commits the code.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a dotnet tools manifest file:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;dotnet new tool-manifest&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Install the &lt;em&gt;dotnet-format&lt;/em&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;dotnet tool &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; dotnet-format&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;Add an &lt;em&gt;.editorconfig&lt;/em&gt; file to the root of the project. I suggest to use &lt;a href=&quot;https://github.com/dotnet/roslyn/blob/master/.editorconfig&quot;&gt;Roslyn team’s config file&lt;/a&gt; as a base.&lt;/li&gt;
&lt;li&gt;Initialize an &lt;em&gt;npm&lt;/em&gt; project:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;yarn&lt;/span&gt; init&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;Install the following &lt;em&gt;npm&lt;/em&gt; packages as dev dependencies:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;yarn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt; husky lint-staged --dev&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;6&quot;&gt;
&lt;li&gt;Configure &lt;em&gt;husky&lt;/em&gt; to run &lt;em&gt;lint-staged&lt;/em&gt; as a pre-commit &lt;em&gt;git&lt;/em&gt; hook; and configure &lt;em&gt;npm&lt;/em&gt; to restore dotnet tools on install. Add the following to &lt;em&gt;package.json&lt;/em&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token property&quot;&gt;&quot;husky&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;hooks&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;pre-commit&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;lint-staged -r&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token property&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;preinstall&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;dotnet tool restore&quot;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;7&quot;&gt;
&lt;li&gt;The last step is to configure &lt;em&gt;lint-staged&lt;/em&gt; to format our staged files and then stage them back. Create a &lt;em&gt;.lintstagedrc.js&lt;/em&gt; file with the below content:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&apos;*.cs&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;filenames&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;dotnet dotnet-format --files &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;filenames&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;,&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;git add &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;filenames&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos; &apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br&gt;
That’s it. I’ve created a &lt;a href=&quot;https://github.com/eyamenko/dotnet-core-template-repository&quot;&gt;template repository&lt;/a&gt;, which includes everything I’ve mentioned above; and can be used as a starting point when creating new .NET Core repositories.&lt;/p&gt;
&lt;p&gt;Happy coding!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Living the Full-Stack Life]]></title><description><![CDATA[Hi Reader, my name is Eugene and this is the very beginning of my journey as a blogger. I’ve been following various blogs, websites, authors…]]></description><link>https://CodingComrade.com/living-the-full-stack-life/</link><guid isPermaLink="false">https://CodingComrade.com/living-the-full-stack-life/</guid><pubDate>Wed, 25 Sep 2019 10:18:12 GMT</pubDate><content:encoded>&lt;p&gt;Hi Reader, my name is Eugene and this is the very beginning of my journey as a blogger.&lt;/p&gt;
&lt;p&gt;I’ve been following various blogs, websites, authors, but never had a chance to share my knowledge with the world. I feel it’s time to give it back.&lt;/p&gt;
&lt;p&gt;Please join me on my full-stack adventure and I hope you enjoy the ride.&lt;/p&gt;
&lt;p&gt;Happy coding!&lt;/p&gt;</content:encoded></item></channel></rss>