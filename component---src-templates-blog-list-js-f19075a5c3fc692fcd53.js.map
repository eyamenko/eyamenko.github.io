{"version":3,"sources":["webpack:///./src/components/pagination.js","webpack:///./src/templates/blog-list.js"],"names":["Pagination","currentPage","numPages","isFirst","isLast","prevPage","toString","nextPage","style","display","flexWrap","justifyContent","alignItems","listStyle","padding","to","rel","Array","from","length","_","i","key","margin","rhythm","textDecoration","color","background","BlogListTemplate","render","this","props","data","site","siteMetadata","title","author","posts","allMarkdownRemark","edges","landing","map","node","frontmatter","fields","slug","marginBottom","boxShadow","date","dangerouslySetInnerHTML","__html","description","excerpt","pageContext","React","Component","pageQuery"],"mappings":"uLA6DeA,MAxDf,YAAgD,IAA1BC,EAAyB,EAAzBA,YAAaC,EAAY,EAAZA,SACjC,GAAIA,EAAW,EACb,OAAO,KAGT,IAAMC,EAA0B,IAAhBF,EACVG,EAASH,IAAgBC,EACzBG,EAAWJ,EAAc,GAAM,EAAI,KAAOA,EAAc,GAAGK,WAC3DC,GAAYN,EAAc,GAAGK,WAEnC,OACE,wBACEE,MAAO,CACLC,QAAS,OACTC,SAAU,OACVC,eAAgB,gBAChBC,WAAY,SACZC,UAAW,OACXC,QAAS,KAGTX,GACA,kBAAC,OAAD,CAAMY,GAAIV,EAAUW,IAAI,QAAxB,mBAIDd,EAAW,GACVe,MAAMC,KAAK,CAAEC,OAAQjB,IAAY,SAACkB,EAAGC,GAAJ,OAC/B,wBACEC,IAAG,qBAAsBD,EAAI,GAC7Bb,MAAO,CACLe,OAAQ,IAGV,kBAAC,OAAD,CACER,GAAE,KAAY,IAANM,EAAU,GAAKA,EAAI,GAC3Bb,MAAO,CACLM,QAASU,YAAO,KAChBC,eAAgB,OAChBC,MAAOL,EAAI,IAAMpB,EAAc,UAAY,GAC3C0B,WAAYN,EAAI,IAAMpB,EAAc,UAAY,KAGjDoB,EAAI,QAIXjB,GACA,kBAAC,OAAD,CAAMW,GAAIR,EAAUS,IAAI,QAAxB,iB,8CC5CFY,E,gLACJC,OAAA,WAAU,IAAD,EACmBC,KAAKC,MAAMC,KAAKC,KAAKC,aAAvCC,EADD,EACCA,MAAOC,EADR,EACQA,OACTC,EAAQP,KAAKC,MAAMC,KAAKM,kBAAkBC,MAEhD,OACE,kBAAC,IAAD,CAAQC,SAAO,EAACL,MAAOA,EAAOC,OAAQA,GACpC,kBAAC,IAAD,MACA,kBAAC,IAAD,MACCC,EAAMI,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACNP,EAAQO,EAAKC,YAAYR,OAASO,EAAKE,OAAOC,KACpD,OACE,yBAAKvB,IAAKoB,EAAKE,OAAOC,MACpB,wBACErC,MAAO,CACLsC,aAActB,YAAO,OAGvB,kBAAC,OAAD,CAAMhB,MAAO,CAAEuC,UAAU,QAAWhC,GAAI2B,EAAKE,OAAOC,MACjDV,IAGL,+BAAQO,EAAKC,YAAYK,MACzB,uBACEC,wBAAyB,CACvBC,OAAQR,EAAKC,YAAYQ,aAAeT,EAAKU,eAMvD,kBAAC,EAAetB,KAAKC,MAAMsB,e,GA/BJC,IAAMC,WAuCxBC,GAFE5B,YAEO","file":"component---src-templates-blog-list-js-f19075a5c3fc692fcd53.js","sourcesContent":["import React from 'react';\nimport { Link } from 'gatsby';\n\nimport { rhythm } from '../utils/typography';\n\nfunction Pagination({ currentPage, numPages }) {\n  if (numPages < 2) {\n    return null;\n  }\n\n  const isFirst = currentPage === 1;\n  const isLast = currentPage === numPages;\n  const prevPage = currentPage - 1 === 1 ? '/' : (currentPage - 1).toString();\n  const nextPage = (currentPage + 1).toString();\n\n  return (\n    <ul\n      style={{\n        display: 'flex',\n        flexWrap: 'wrap',\n        justifyContent: 'space-between',\n        alignItems: 'center',\n        listStyle: 'none',\n        padding: 0,\n      }}\n    >\n      {!isFirst && (\n        <Link to={prevPage} rel=\"prev\">\n          ← Previous Page\n        </Link>\n      )}\n      {numPages > 1 &&\n        Array.from({ length: numPages }, (_, i) => (\n          <li\n            key={`pagination-number${i + 1}`}\n            style={{\n              margin: 0,\n            }}\n          >\n            <Link\n              to={`/${i === 0 ? '' : i + 1}`}\n              style={{\n                padding: rhythm(1 / 4),\n                textDecoration: 'none',\n                color: i + 1 === currentPage ? '#ffffff' : '',\n                background: i + 1 === currentPage ? '#007acc' : '',\n              }}\n            >\n              {i + 1}\n            </Link>\n          </li>\n        ))}\n      {!isLast && (\n        <Link to={nextPage} rel=\"next\">\n          Next Page →\n        </Link>\n      )}\n    </ul>\n  );\n}\n\nexport default Pagination;\n","import React from 'react';\nimport { Link, graphql } from 'gatsby';\n\nimport Bio from '../components/bio';\nimport Layout from '../components/layout';\nimport SEO from '../components/seo';\nimport { rhythm } from '../utils/typography';\nimport Pagination from '../components/pagination';\n\nclass BlogListTemplate extends React.Component {\n  render() {\n    const { title, author } = this.props.data.site.siteMetadata;\n    const posts = this.props.data.allMarkdownRemark.edges;\n\n    return (\n      <Layout landing title={title} author={author}>\n        <SEO />\n        <Bio />\n        {posts.map(({ node }) => {\n          const title = node.frontmatter.title || node.fields.slug;\n          return (\n            <div key={node.fields.slug}>\n              <h3\n                style={{\n                  marginBottom: rhythm(1 / 4),\n                }}\n              >\n                <Link style={{ boxShadow: `none` }} to={node.fields.slug}>\n                  {title}\n                </Link>\n              </h3>\n              <small>{node.frontmatter.date}</small>\n              <p\n                dangerouslySetInnerHTML={{\n                  __html: node.frontmatter.description || node.excerpt,\n                }}\n              />\n            </div>\n          );\n        })}\n        <Pagination {...this.props.pageContext} />\n      </Layout>\n    );\n  }\n}\n\nexport default BlogListTemplate;\n\nexport const pageQuery = graphql`\n  query BlogListByPage($skip: Int!, $limit: Int!) {\n    site {\n      siteMetadata {\n        title\n        author\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}