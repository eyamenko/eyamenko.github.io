{"componentChunkName":"component---src-templates-blog-post-js","path":"/robust-caching-with-redis/","webpackCompilationHash":"b1bb345794198b5229c0","result":{"data":{"site":{"siteMetadata":{"title":"Coding Comrade","author":"Eugene Yamenko","siteUrl":"https://CodingComrade.com"}},"markdownRemark":{"id":"fdc34d5d-4799-5cba-9d14-0caf2788c0cf","excerpt":"Sometimes querying the database can be slow. Especially, if the tables are large and it’s not possible to take advantage of existing indices. That’s where…","html":"<p>Sometimes querying the database can be slow. Especially, if the tables are large and it’s not possible to take advantage of existing indices. That’s where caching shines. It’s a lot faster to get a value from cache instead of getting it from the database. Particularly, if it’s a frequently returned data and it doesn’t change often.</p>\n<p>One of the great solutions for caching is <a href=\"https://redis.io/\">Redis</a>. Redis is an in-memory data store. There are client libraries for all main platforms. Redis is widely used and it’s supported by all major cloud providers (AWS, Azure, etc.).</p>\n<p>Unfortunately, incorrectly used or incorrectly configured client can bring the entire service down. Let’s take a look at some good practices, which can help to speed up our services and don’t kill them under the load.</p>\n<p>As an example, I will use an excellent client library for .NET, called <a href=\"https://stackexchange.github.io/StackExchange.Redis/\">StackExchange.Redis</a>. At the time of writing, it’s the most popular one and it’s battle tested by some large websites, e.g. <a href=\"https://stackoverflow.com/\">StackOverflow</a>.</p>\n<ol>\n<li>First things first, make sure to use the latest version of the library. Authors promptly fix issues and often release new versions.</li>\n<li>Have a single connection per application and initialize it in a thread-safe way. Make the cache client a singleton.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// In the constructor</span>\n_connection <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token generic-method\"><span class=\"token function\">Lazy</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ConnectionMultiplexer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> ConnectionMultiplexer<span class=\"token punctuation\">.</span><span class=\"token function\">Connect</span><span class=\"token punctuation\">(</span>redisOptions<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">.</span>Configuration<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// Startup.cs</span>\nservices<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddSingleton</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ICacheClient</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">RedisCacheClient</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ol start=\"3\">\n<li>Use circuit breakers. Wrap get and set commands into a separate circuit breakers. Sometimes new items cannot be inserted, because the server, for instance, ran out of memory, but it shouldn’t affect the ability to get cached items.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// In the constructor</span>\n_readCircuitBreaker <span class=\"token operator\">=</span> Policy<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Handle</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Exception</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">CircuitBreakerAsync</span><span class=\"token punctuation\">(</span>exceptionsAllowedBeforeBreaking<span class=\"token punctuation\">,</span> durationOfBreak<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n_writeCircuitBreaker <span class=\"token operator\">=</span> Policy<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Handle</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Exception</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">CircuitBreakerAsync</span><span class=\"token punctuation\">(</span>exceptionsAllowedBeforeBreaking<span class=\"token punctuation\">,</span> durationOfBreak<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ol start=\"4\">\n<li>If there is no need, don’t wait for a response when setting values. Just fire and forget set commands.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">keyValuePairs<span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>kvp <span class=\"token operator\">=></span> db<span class=\"token punctuation\">.</span><span class=\"token function\">StringSetAsync</span><span class=\"token punctuation\">(</span>kvp<span class=\"token punctuation\">.</span>Key<span class=\"token punctuation\">,</span> kvp<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">,</span> expiry<span class=\"token punctuation\">:</span> _cacheExpiry<span class=\"token punctuation\">,</span> flags<span class=\"token punctuation\">:</span> CommandFlags<span class=\"token punctuation\">.</span>FireAndForget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ol start=\"5\">\n<li>Set the minimum number of worker threads used by the application. More can be read about it <a href=\"https://github.com/StackExchange/StackExchange.Redis/blob/master/docs/Timeouts.md\">here</a>.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// Program.cs</span>\nThreadPool<span class=\"token punctuation\">.</span><span class=\"token function\">SetMinThreads</span><span class=\"token punctuation\">(</span>MinThreads<span class=\"token punctuation\">,</span> MinThreads<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ol start=\"6\">\n<li>Configure the client to not abort if connection fails. Also, configure sync and connection timeouts.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"Configuration\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"localhost:6379,abortConnect=false,syncTimeout=3000,connectTimeout=3000\"</span></code></pre></div>\n<p><br>\nHappy coding!</p>","frontmatter":{"title":"Robust caching with Redis","date":"December 25, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/robust-caching-with-redis/","previous":{"fields":{"slug":"/automatic-code-formatting-for-dotnet-projects/"},"frontmatter":{"title":"Automatic code formatting for .NET projects"}},"next":{"fields":{"slug":"/running-microsoft-orleans-in-aws-ecs/"},"frontmatter":{"title":"Running Microsoft Orleans in AWS ECS"}}}}}